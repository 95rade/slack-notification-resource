#!/bin/bash

set -e

cd "${1}"

exec 3>&1
exec 1>&2

# for jq
PATH=/usr/local/bin:$PATH

payload=$(mktemp /tmp/resource-in.XXXXXX)

cat > "${payload}" <&0

webhook_url="$(jq -r '.source.url' < "${payload}")"

text_file="$(jq -r '.params.text_file // ""' < "${payload}")"
text="$(jq '(.params.text // "${TEXT_FILE_CONTENT}")' < "${payload}")"
username="$(jq '(.params.username // null)' < "${payload}")"
icon_url="$(jq '(.params.icon_url // null)' < "${payload}")"
icon_emoji="$(jq '(.params.icon_emoji // null)' < "${payload}")"
channel="$(jq '(.params.channel // null)' < "${payload}")"

debug="$(jq -r '.params.debug // "false"' < "${payload}")"
show_metadata="$(jq -r '.params.metadata // "false"' < "${payload}")"
silent="$(jq -r '.params.silent // "false"' < "${payload}")"
always_notify="$(jq -r '.params.always_notify // "false"' < "${payload}")"

TEXT_FILE_CONTENT=""
[[ -n "${text_file}" && -f "${text_file}" ]] && TEXT_FILE_CONTENT="$(cat "${text_file}")"

debug_info=""
metadata=""
body=""

if [[ "$always_notify" == "true" || -n "$TEXT_FILE_CONTENT" || -z "$text_file" ]]
then
  TEXT_FILE_CONTENT="${TEXT_FILE_CONTENT:-_(no notification provided)_}"

  text="$(eval printf ${text} )"
  [[ -z "${text}" ]] && text="_(missing notification text)_"
  text="$(echo "${text}" | jq -R -s .)"

  [[ "${username}"   != "null" ]] && username="$(eval "printf ${username}" | jq -R -s .)"
  [[ "${icon_url}"   != "null" ]] && icon_url="$(eval "printf ${icon_url}" | jq -R -s .)"
  [[ "${icon_emoji}" != "null" ]] && icon_emoji="$(eval "printf ${icon_emoji}" | jq -R -s .)"
  [[ "${channel}"    != "null" ]] && channel="$(eval "printf ${channel}" | jq -R -s .)"

  body="$(cat <<EOF
{
  "text": ${text},
  "username": ${username},
  "icon_url": ${icon_url},
  "icon_emoji": ${icon_emoji},
  "channel": ${channel}
}
EOF
  )"

  compact_body="$(echo "${body}" | jq -c '.')"

  if [[ "$debug" == "true" ]]
  then
    debug_info="$(cat <<EOF
{
  "webhook_url": "${webhook_url}",
  "body": ${body}
}
EOF
)" 
  elif [[ "$silent" == "true" ]]
  then
    echo "Using silent output"
    curl -s -X POST --data-urlencode "payload=${compact_body}" "${webhook_url}"
  else
    curl -v -X POST --data-urlencode "payload=${compact_body}" "${webhook_url}"
  fi
else
  text="$(echo "" | jq -R -s .)"
fi

if [[ "$show_metadata" == "true" ]]
then
  redacted_webhook_url=$(echo "${webhook_url}" | sed -e 's#/\([^/\.]\{2\}\)[^/.]\{5,\}\([^/.]\{2\}\)#/\1â€¦\2#g' | jq -R .)
  metadata="$(cat <<EOF
{
  "metadata": [
    {"name": "text",     "value": ${text}                },
    {"name": "username", "value": ${username}            },
    {"name": "channel",  "value": ${channel}             },
    {"name": "url",      "value": ${redacted_webhook_url}}
  ]
}
EOF
  )"
fi

timestamp="$(jq -n "{version:{timestamp:\"$(date +%s)\"}}")"
echo "$timestamp $metadata $debug_info " | jq -s add  >&3
