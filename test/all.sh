#!/bin/bash

set -e

on_exit() {
  exitcode=$?
  if [ $exitcode != 0 ] ; then
    echo -e '\e[41;33;1m'"Failure encountered!"'\e[0m'
  fi
}

trap on_exit EXIT

test() {
  base_dir="$(cd "$(dirname $0)" ; pwd )"
  if [ -f "${base_dir}/../out" ] ; then
    cmd="../out"
  elif [ -f /opt/resource/out ] ; then
    cmd="/opt/resource/out"
  fi

  header="$(cat <<EOM
------------------------------------------------------------------------------
TESTING: $1

Input:
$(cat ${base_dir}/${1}.out)

Output:
EOM
  )"
  echo "$header" >&2


  (cd $base_dir && cat ${1}.out | $cmd . 2>&1 | tee /dev/stderr)
}

export BUILD_PIPELINE_NAME='my-pipeline'
export BUILD_JOB_NAME='my-job'
export BUILD_NAME='my-build'

webhook_url='https://some.url'
base_text=":some_emoji:<https://my-ci.my-org.com/pipelines/my-pipeline/jobs/my-job/builds/my-build|Alert!>"
sample_text="This text came from sample.txt. It could have been generated by a previous Concourse task.\n\nMultiple lines are allowed.\n"
missing_text="_(no notification provided)_"

username="concourse"

test combined_text_template_and_file | jq -e "
  .webhook_url == $(echo $webhook_url | jq -R .) and
  .body.channel == null and
  .body.icon_url == null and
  .body.icon_emoji == null and
  .body.username == $(echo $username | jq -R .) and
  .body.text == \"${base_text}\n${sample_text}\" and 
  ( .body | keys | contains([\"channel\",\"icon_emoji\",\"icon_url\",\"username\",\"text\"]) ) and
  ( .body | keys | length ==  5 )"


test combined_text_template_and_file_empty | jq -e "
  .webhook_url == $(echo $webhook_url | jq -R .) and
  .body.channel == null and
  .body.icon_url == null and
  .body.icon_emoji == null and
  .body.username == $(echo $username | jq -R .) and
  .body.text == \"${base_text}\n${missing_text}\n\" and 
  ( .body | keys | contains([\"channel\",\"icon_emoji\",\"icon_url\",\"username\",\"text\"]) ) and
  ( .body | keys | length ==  5 )"


test combined_text_template_and_file_missing | jq -e "
  .webhook_url == $(echo $webhook_url | jq -R .) and
  .body.channel == null and
  .body.icon_url == null and
  .body.icon_emoji == null and
  .body.username == $(echo $username | jq -R .) and
  .body.text == \"${base_text}\n${missing_text}\n\" and 
  ( .body | keys | contains([\"channel\",\"icon_emoji\",\"icon_url\",\"username\",\"text\"]) ) and
  ( .body | keys | length ==  5 )"

test text | jq -e "
  .webhook_url == $(echo $webhook_url | jq -R .) and
  .body.channel == null and
  .body.icon_url == null and
  .body.icon_emoji == null and
  .body.username == $(echo $username | jq -R .) and
  .body.text == \"Inline static text\n\" and 
  ( .body | keys | contains([\"channel\",\"icon_emoji\",\"icon_url\",\"username\",\"text\"]) ) and
  ( .body | keys | length ==  5 )"

test text_file | jq -e "
  .webhook_url == $(echo $webhook_url | jq -R .) and
  .body.channel == null and
  .body.icon_url == null and
  .body.icon_emoji == null and
  .body.username == $(echo $username | jq -R .) and
  .body.text == \"${sample_text}\" and 
  ( .body | keys | contains([\"channel\",\"icon_emoji\",\"icon_url\",\"username\",\"text\"]) ) and
  ( .body | keys | length ==  5 )"

test text_file_empty | jq -e "
  .webhook_url == $(echo $webhook_url | jq -R .) and
  .body.channel == null and
  .body.icon_url == null and
  .body.icon_emoji == null and
  .body.username == $(echo $username | jq -R .) and
  .body.text == \"${missing_text}\n\" and 
  ( .body | keys | contains([\"channel\",\"icon_emoji\",\"icon_url\",\"username\",\"text\"]) ) and
  ( .body | keys | length ==  5 )"

test text_file_empty_suppress | jq -e "
  ( . | keys | length == 1 ) and
  ( .version | keys == [\"timestamp\"] )"

echo -e '\e[32;1m'"All tests passed!"'\e[0m'
